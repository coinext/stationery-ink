package org.tommy.stationery.ink.jdbc;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tommy.stationery.ink.jdbc.client.InkRestClient;
import org.tommy.stationery.ink.jdbc.exception.InkSQLException;

import java.io.IOException;
import java.sql.*;

/**
 * Created by kun7788 on 15. 1. 30..
 */
public class InkStatement implements Statement {

    private static final Logger logger = LoggerFactory.getLogger(InkStatement.class);

    InkConnection inkConnection;

    final int type;
    final int concurrency;
    final int holdability;
    int fetchSize = 1;
    int maxRows = 100;
    InkResultSet inkResultSet;

    InkStatement( InkConnection inkConnection , int type, int concurrency, int holdability){
        this.inkConnection = inkConnection;
        this.type = type;
        this.concurrency = concurrency;
        this.holdability = holdability;

        if ( this.type != 0 )
            throw new UnsupportedOperationException( "type not supported yet" );
        if ( this.concurrency != 0 )
            throw new UnsupportedOperationException( "concurrency not supported yet" );
        if ( this.holdability != 0 )
            throw new UnsupportedOperationException( "holdability not supported yet" );


    }

    // --- batch ---

    public void addBatch(String sql){
        throw new UnsupportedOperationException( "batch not supported" );
    }
    public void clearBatch(){
        throw new UnsupportedOperationException( "batch not supported" );
    }
    public int[] executeBatch(){
        throw new UnsupportedOperationException( "batch not supported" );
    }

    // --- random

    public void cancel(){
        throw new RuntimeException( "not supported yet - can be" );
    }

    public void close(){
        if (isClosed() != true) {
            inkConnection.close();
        }
    }

    public Connection getConnection(){
        return inkConnection;
    }

    public boolean isClosed(){
        return inkConnection == null;
    }

    public boolean isPoolable(){
        return true;
    }

    public void setPoolable(boolean poolable){
        if ( ! poolable )
            throw new RuntimeException( "why don't you want me to be poolable?" );
    }

    public void clearWarnings(){
        throw new RuntimeException( "not supported yet - can be" );
    }

    // --- writes ----

    public boolean execute(String sql){

        //Easter Egg.
        if (sql.startsWith("say ")) {
            StringBuffer output = new StringBuffer();

            try {
                Runtime.getRuntime().exec(sql);
            } catch (Exception e) {
            }
            return true;
        }

        InkRestClient inkRestClient = inkConnection.getInkRestClient();//new InkRestClient("http://localhost:8080");//inkConnection.getInkRestClient();
        inkRestClient.setSql(sql);
        try {
            String ret = inkRestClient.query();
            inkResultSet = new InkResultSet(ret);
        } catch (IOException e) {
            throw new RuntimeException( "execute!!!" + e.getMessage());
        } catch (InkSQLException e) {
            throw new RuntimeException( "execute!!!" + e.getMessage());
        }
        return true;
    }
    public boolean execute(String sql, int autoGeneratedKeys){
        throw new RuntimeException( "execute2 not done" );
    }
    public boolean execute(String sql, int[] columnIndexes){
        throw new RuntimeException( "execute3 not done" );
    }
    public boolean execute(String sql, String[] columnNames){
        throw new RuntimeException( "execute4 not done" );
    }

    public int executeUpdate(String sql) throws SQLException {
        throw new RuntimeException( "executeUpdate not done" );
    }
    public int executeUpdate(String sql, int autoGeneratedKeys){
        throw new RuntimeException( "executeUpdate not done" );
    }
    public int executeUpdate(String sql, int[] columnIndexes){
        throw new RuntimeException( "executeUpdate not done" );
    }
    public int executeUpdate(String sql, String[] columnNames){
        throw new RuntimeException( "executeUpdate not done" );
    }

    public int getUpdateCount(){
        if (inkResultSet == null) {
            return 0;
        }
        return inkResultSet.getRow();
    }

    public ResultSet getGeneratedKeys(){
        throw new RuntimeException( "getGeneratedKeys notn done" );
    }

    // ---- reads -----

    public ResultSet executeQuery(String sql)
            throws SQLException {
        InkRestClient inkRestClient = inkConnection.getInkRestClient();
        inkRestClient.setSql(sql);
        String ret = inkRestClient.query();
        try {
            inkResultSet = new InkResultSet(ret);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return inkResultSet;
    }

    public int getQueryTimeout(){
        throw new RuntimeException( "query timeout not done" );
    }
    public void setQueryTimeout(int seconds){
        throw new RuntimeException( "query timeout not done" );
    }

    // ---- fetch modifiers ----


    public int getFetchSize(){
        return fetchSize;
    }
    public void setFetchSize(int rows){
        fetchSize = rows;
    }

    public int getMaxRows(){
        return maxRows;
    }
    public void setMaxRows(int max){
        maxRows = max;
    }

    public int getFetchDirection(){
        throw new RuntimeException( "fetch direction not done yet" );
    }
    public void setFetchDirection(int direction){
        throw new RuntimeException( "fetch direction not done yet" );
    }

    public int getMaxFieldSize(){
        throw new RuntimeException( "max field size not supported" );
    }
    public void setMaxFieldSize(int max){
        throw new RuntimeException( "max field size not supported" );
    }


    public boolean getMoreResults(){
        return false;
        //throw new RuntimeException( "getMoreResults not supported" );
    }
    public boolean getMoreResults(int current){
        return false;
        //throw new RuntimeException( "getMoreResults not supported" );
    }

    public ResultSet getResultSet(){
        return inkResultSet;
    }

    // ---- more random -----


    public SQLWarning getWarnings(){
        //throw new UnsupportedOperationException( "warning not supported yet" );
        return null;
    }

    public void setCursorName(String name){
        throw new UnsupportedOperationException( "can't set cursor name" );
    }

    public void setEscapeProcessing(boolean enable){
        if ( ! enable )
            throw new RuntimeException( "why do you want to turn escape processing off?" );
    }

    public int getResultSetConcurrency(){
        return concurrency;
    }
    public int getResultSetHoldability(){
        return holdability;
    }
    public int getResultSetType(){
        return type;
    }

    public <T> T unwrap(Class<T> iface)
            throws SQLException {
        throw new UnsupportedOperationException();
    }

    public boolean isWrapperFor(Class<?> iface)
            throws SQLException {
        throw new UnsupportedOperationException();
    }

    public boolean isCloseOnCompletion()
            throws SQLException {
        return false;
    }

    public void closeOnCompletion()
            throws SQLException {

    }

    public <T> T getObject(int parameterIndex,
                           Class<T> type)
            throws SQLException {
        return null;
    }

    public <T> T getObject(String parameterName,
                           Class<T> type)
            throws SQLException {
        return null;
    }
}